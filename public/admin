<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Matar ou Morrer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .admin-container {
            background: rgba(0, 0, 0, 0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            padding: 20px;
            margin: 20px;
        }
        .stats-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 10px;
            padding: 20px;
            margin: 10px 0;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }
        .warning-banner {
            background: rgba(255, 193, 7, 0.9);
            border: 2px solid #ffc107;
            border-radius: 10px;
            padding: 15px;
            margin: 20px 0;
            color: #856404;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 text-center mb-4 mt-3">
                <img src="/KillOrDieLogo.png" alt="Matar ou Morrer" class="img-fluid rounded mx-auto d-block mb-3" style="max-height: 200px;">
                <h2 class="text-white">üõ†Ô∏è Painel de Administra√ß√£o</h2>
                <p class="text-light">Sistema de monitoramento e limpeza autom√°tica</p>
            </div>
        </div>
        
        <div class="admin-container">
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex gap-3 justify-content-center">
                        <button id="btnRefresh" class="btn btn-primary">üìä Atualizar Estat√≠sticas</button>
                        <button id="btnCleanup" class="btn btn-danger">üßπ Executar Limpeza</button>
                        <button id="btnTest" class="btn btn-warning">üß™ Testar Sistema</button>
                    </div>
                </div>
            </div>
            
            <div id="loading" class="text-center text-white d-none">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
                <p class="mt-2">Processando...</p>
            </div>
            
            <div id="stats" class="row">
                <div class="col-md-3 col-sm-6">
                    <div class="stats-card text-center">
                        <div id="totalPlayers" class="stat-number text-primary">-</div>
                        <div class="stat-label">Total de Jogadores</div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="stats-card text-center">
                        <div id="totalRooms" class="stat-number text-success">-</div>
                        <div class="stat-label">Total de Salas</div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="stats-card text-center">
                        <div id="inactivePlayers" class="stat-number text-warning">-</div>
                        <div class="stat-label">Jogadores Inativos (&gt;2h)</div>
                    </div>
                </div>
                <div class="col-md-3 col-sm-6">
                    <div class="stats-card text-center">
                        <div id="inactiveRooms" class="stat-number text-danger">-</div>
                        <div class="stat-label">Salas Inativas (&gt;2h)</div>
                    </div>
                </div>
            </div>
            
            <div id="results" class="row mt-4 d-none">
                <div class="col-12">
                    <div class="stats-card">
                        <h5>üìã Resultado da Opera√ß√£o</h5>
                        <div id="resultContent"></div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-12 text-center mb-4">
                <a href="/" class="btn btn-outline-light btn-lg">‚Üê Voltar ao Jogo Principal</a>
            </div>
        </div>
        
        <div class="warning-banner">
            <strong>‚ö†Ô∏è P√°gina Restrita:</strong> Esta p√°gina √© destinada apenas para administradores do sistema.
            As opera√ß√µes de limpeza s√£o irrevers√≠veis. Use com cuidado.
        </div>
    </div>

    <!-- Configura√ß√£o do Supabase -->
    <script type="module">
        // Fun√ß√£o para buscar configura√ß√µes do ambiente
        async function getSupabaseConfig() {
            try {
                // Tentar buscar do mesmo local que a aplica√ß√£o React
                const response = await fetch('/env-config.json');
                if (response.ok) {
                    const config = await response.json();
                    return {
                        url: config.REACT_APP_SUPABASE_URL,
                        key: config.REACT_APP_SUPABASE_ANON_KEY
                    };
                }
            } catch (error) {
                console.log('Arquivo de configura√ß√£o n√£o encontrado, usando vari√°veis padr√£o');
            }
            
            // Fallback: buscar das vari√°veis de ambiente do processo (se dispon√≠vel)
            if (typeof process !== 'undefined' && process.env) {
                return {
                    url: process.env.REACT_APP_SUPABASE_URL,
                    key: process.env.REACT_APP_SUPABASE_ANON_KEY
                };
            }
            
            // √öltimo fallback: tentar buscar do localStorage (se a aplica√ß√£o React j√° salvou)
            const storedUrl = localStorage.getItem('supabase_url');
            const storedKey = localStorage.getItem('supabase_key');
            
            if (storedUrl && storedKey) {
                return { url: storedUrl, key: storedKey };
            }
            
            // Se nada funcionar, retornar null para mostrar mensagem de configura√ß√£o
            return null;
        }
        
        // Inicializar aplica√ß√£o
        async function initApp() {
            const config = await getSupabaseConfig();
            
            if (!config || !config.url || !config.key || 
                config.url.includes('your-project') || config.key.includes('your-anon-key')) {
                
                document.body.innerHTML = `
                    <div class="container-fluid text-center mt-5">
                        <div class="alert alert-warning" role="alert">
                            <h4 class="alert-heading">‚ö†Ô∏è Configura√ß√£o Necess√°ria</h4>
                            <p>Para usar o painel de administra√ß√£o, voc√™ precisa configurar suas credenciais do Supabase.</p>
                            <hr>
                            <div class="text-start">
                                <p><strong>Op√ß√£o 1 - Arquivo de configura√ß√£o (Recomendado):</strong></p>
                                <ol>
                                    <li>Crie um arquivo <code>public/env-config.json</code></li>
                                    <li>Adicione suas credenciais:
                                        <pre>{
  "REACT_APP_SUPABASE_URL": "https://sua-url.supabase.co",
  "REACT_APP_SUPABASE_ANON_KEY": "sua-chave-anon"
}</pre>
                                    </li>
                                    <li>Recarregue a p√°gina</li>
                                </ol>
                                
                                <p><strong>Op√ß√£o 2 - Usar mesmo .env da aplica√ß√£o:</strong></p>
                                <ol>
                                    <li>Execute a aplica√ß√£o React primeiro</li>
                                    <li>As credenciais ser√£o salvas automaticamente</li>
                                    <li>Recarregue esta p√°gina</li>
                                </ol>
                            </div>
                        </div>
                        <a href="/" class="btn btn-primary">‚Üê Voltar ao Jogo</a>
                    </div>
                `;
                return;
            }
            
            // Salvar configura√ß√µes no localStorage para pr√≥ximas visitas
            localStorage.setItem('supabase_url', config.url);
            localStorage.setItem('supabase_key', config.key);
            
            // Importar Supabase via CDN
            const { createClient } = await import('https://cdn.skypack.dev/@supabase/supabase-js@2');
            const supabase = createClient(config.url, config.key);
            // Elementos DOM
            const btnRefresh = document.getElementById('btnRefresh');
            const btnCleanup = document.getElementById('btnCleanup');
            const btnTest = document.getElementById('btnTest');
            const loading = document.getElementById('loading');
            const stats = document.getElementById('stats');
            const results = document.getElementById('results');
            const resultContent = document.getElementById('resultContent');
            
            // Elementos de estat√≠sticas
            const totalPlayers = document.getElementById('totalPlayers');
            const totalRooms = document.getElementById('totalRooms');
            const inactivePlayers = document.getElementById('inactivePlayers');
            const inactiveRooms = document.getElementById('inactiveRooms');
            
            // Fun√ß√£o para mostrar loading
            function showLoading() {
                loading.classList.remove('d-none');
                stats.classList.add('d-none');
            }
            
            // Fun√ß√£o para esconder loading
            function hideLoading() {
                loading.classList.add('d-none');
                stats.classList.remove('d-none');
            }
            
            // Fun√ß√£o para mostrar resultado
            function showResult(content) {
                resultContent.innerHTML = content;
                results.classList.remove('d-none');
            }
            
            // Carregar estat√≠sticas
            async function loadStats() {
                showLoading();
                try {
                    const { data, error } = await supabase.rpc('get_system_stats');
                    
                    if (error) throw error;
                    
                    if (data) {
                        totalPlayers.textContent = data.total_players || 0;
                        totalRooms.textContent = data.total_rooms || 0;
                        inactivePlayers.textContent = data.inactive_players_2h || 0;
                        inactiveRooms.textContent = data.inactive_rooms_2h || 0;
                    }
                    
                    showResult(`
                        <div class="alert alert-success">
                            ‚úÖ Estat√≠sticas atualizadas em ${new Date().toLocaleString()}
                        </div>
                    `);
                } catch (error) {
                    console.error('Erro ao carregar estat√≠sticas:', error);
                    showResult(`
                        <div class="alert alert-danger">
                            ‚ùå Erro ao carregar estat√≠sticas: ${error.message}
                        </div>
                    `);
                } finally {
                    hideLoading();
                }
            }
            
            // Executar limpeza
            async function executeCleanup() {
                if (!confirm('Tem certeza que deseja executar a limpeza? Esta opera√ß√£o √© irrevers√≠vel.')) {
                    return;
                }
                
                showLoading();
                try {
                    const { data, error } = await supabase.rpc('cleanup_inactive_data');
                    
                    if (error) throw error;
                    
                    showResult(`
                        <div class="alert alert-success">
                            ‚úÖ Limpeza executada com sucesso!<br>
                            <strong>Jogadores removidos:</strong> ${data.players_deleted || 0}<br>
                            <strong>Salas removidas:</strong> ${data.rooms_deleted || 0}<br>
                            <strong>Executado em:</strong> ${new Date(data.cleaned_at).toLocaleString()}
                        </div>
                    `);
                    
                    // Recarregar estat√≠sticas
                    setTimeout(loadStats, 1000);
                } catch (error) {
                    console.error('Erro na limpeza:', error);
                    showResult(`
                        <div class="alert alert-danger">
                            ‚ùå Erro na limpeza: ${error.message}
                        </div>
                    `);
                } finally {
                    hideLoading();
                }
            }
            
            // Testar sistema
            async function testSystem() {
                showLoading();
                try {
                    const { data, error } = await supabase.rpc('test_cleanup_system');
                    
                    if (error) throw error;
                    
                    const passed = data.test_passed ? '‚úÖ PASSOU' : '‚ùå FALHOU';
                    showResult(`
                        <div class="alert ${data.test_passed ? 'alert-success' : 'alert-warning'}">
                            üß™ <strong>Teste do Sistema:</strong> ${passed}<br>
                            <strong>Executado em:</strong> ${new Date(data.test_executed_at).toLocaleString()}<br>
                            <details class="mt-2">
                                <summary>Detalhes do teste</summary>
                                <pre class="mt-2">${JSON.stringify(data, null, 2)}</pre>
                            </details>
                        </div>
                    `);
                } catch (error) {
                    console.error('Erro no teste:', error);
                    showResult(`
                        <div class="alert alert-danger">
                            ‚ùå Erro no teste: ${error.message}
                        </div>
                    `);
                } finally {
                    hideLoading();
                }
            }
            
            // Event listeners
            btnRefresh.addEventListener('click', loadStats);
            btnCleanup.addEventListener('click', executeCleanup);
            btnTest.addEventListener('click', testSystem);
            
            // Carregar estat√≠sticas iniciais
            loadStats();
            
            // Auto-refresh a cada 30 segundos
            setInterval(loadStats, 30000);
        }
        
        // Inicializar aplica√ß√£o quando a p√°gina carregar
        initApp();
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
